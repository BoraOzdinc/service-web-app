generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id                String              @id @default(cuid())
  name              String
  surname           String
  phoneNumber       String
  email             String
  identificationNo  String?
  priceType         PriceType
  companyName       String?
  taxDep            String?
  taxNumber         String?
  orgId             String?
  connectedDealerId String?
  adresses          Address[]
  connectedDealer   Org?                @relation("connectedDealer", fields: [connectedDealerId], references: [id])
  org               Org?                @relation(fields: [orgId], references: [id])
  ItemAcceptHistory ItemAcceptHistory[]
  Transactions      Transaction[]

  @@index([connectedDealerId])
  @@index([orgId])
}

model CustomerHistory {
  id                String        @id @default(cuid())
  customerId        String?
  name              String
  surname           String
  phoneNumber       String
  email             String
  identificationNo  String?
  priceType         PriceType
  companyName       String?
  taxDep            String?
  taxNumber         String?
  orgId             String?
  connectedDealerId String?
  changeDate        DateTime      @default(now())
  action            audit_actions
  updatedBy         String?       @default("System")
}

model Transaction {
  id                  String                  @id @default(cuid())
  customerId          String
  createDate          DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  transactionType     transactionType
  payAmount           String?
  totalAmount         String?
  discount            String?
  priceType           PriceType?
  exchangeRate        String?
  transferredDealerId String?
  storageId           String
  orgId               String?
  memberId            String?
  customer            Customer                @relation(fields: [customerId], references: [id])
  employee            Member?                 @relation(fields: [memberId], references: [id])
  org                 Org?                    @relation("connectedOrg", fields: [orgId], references: [id])
  storage             Storage                 @relation(fields: [storageId], references: [id])
  transferredDealer   Org?                    @relation("trasferredDealer", fields: [transferredDealerId], references: [id])
  items               TransactionItemDetail[]

  @@index([customerId])
  @@index([orgId, storageId])
  @@index([storageId])
}

model TransactionHistory {
  id              String          @id @default(cuid())
  transactionType transactionType
  payAmount       String?
  totalAmount     String?
  discount        String?
  priceType       PriceType?
  exchangeRate    String?
  changeDate      DateTime        @default(now())
  action          audit_actions
  updatedBy       String?         @default("System")
}

model TransactionItemDetail {
  id                    String      @id @default(cuid())
  itemId                String
  quantity              Int
  serialNumbers         String[]
  customerTransactionId String
  customerPrice         String?
  dealerPrice           String?
  CustomerTransaction   Transaction @relation(fields: [customerTransactionId], references: [id])
  item                  Item        @relation(fields: [itemId], references: [id])

  @@index([customerTransactionId])
  @@index([itemId])
}

model Address {
  id          String     @id @default(cuid())
  Type        AdressType
  PhoneNumber String?
  Country     String?
  Province    String?
  District    String?
  Neighbour   String?
  ZipCode     String?
  Adress      String?
  customerId  String?
  Customer    Customer?  @relation(fields: [customerId], references: [id])

  @@index([customerId])
}

model AddressHistory {
  id          String        @id @default(cuid())
  adressId    String?
  Type        AdressType
  PhoneNumber String?
  Country     String?
  Province    String?
  District    String?
  Neighbour   String?
  ZipCode     String?
  Adress      String?
  customerId  String?
  changeDate  DateTime      @default(now())
  action      audit_actions
  updatedBy   String?       @default("System")
}

model DealerView {
  id     String @id @default(cuid())
  itemId String
  stock  Int
  orgId  String
  item   Item   @relation(fields: [itemId], references: [id])
  org    Org    @relation(fields: [orgId], references: [id])

  @@index([itemId])
}

model DealerViewHistory {
  id           String        @id @default(cuid())
  dealerViewId String?
  itemId       String
  stock        Int
  orgId        String
  changeDate   DateTime      @default(now())
  action       audit_actions
  updatedBy    String?       @default("System")
}

model Member {
  id          String        @id @default(cuid())
  orgId       String?
  userEmail   String        @unique
  uid         String?       @unique @db.Uuid
  org         Org?          @relation(fields: [orgId], references: [id])
  Transaction Transaction[]
  roles       MemberRole[]  @relation("MemberToMemberRole")

  @@index([orgId])
}

model MemberHistory {
  id         String        @id @default(cuid())
  memberId   String?
  orgId      String?
  userEmail  String
  uid        String?
  changeDate DateTime      @default(now())
  action     audit_actions
  updatedBy  String?       @default("System")
}

model MemberRole {
  id          String             @id @default(cuid())
  name        String
  orgId       String?
  Org         Org?               @relation(fields: [orgId], references: [id])
  permissions MemberPermission[] @relation("MemberPermissionToMemberRole")
  members     Member[]           @relation("MemberToMemberRole")

  @@index([orgId])
}

model MemberPermission {
  id           String       @id @default(cuid())
  name         String
  description  String
  assignableTo MemberType[]
  MemberRole   MemberRole[] @relation("MemberPermissionToMemberRole")
}

model Item {
  id                            String                  @id @default(cuid())
  createDate                    DateTime                @default(now())
  updateDate                    DateTime                @updatedAt
  name                          String
  itemCode                      String
  isSerialNoRequired            Boolean
  image                         String?
  mainDealerPrice               Float?
  multiPrice                    Float?
  dealerPrice                   Float?
  singlePrice                   Float?
  isServiceItem                 Boolean
  itemColorId                   String
  itemSizeId                    String
  itemCategoryId                String
  itemBrandId                   String
  orgId                         String
  shelfBoxId                    String?
  shelfId                       String?
  netWeight                     Float?
  volume                        Float?
  serviceItemList               String[]
  DealerView                    DealerView[]
  brand                         ItemBrand               @relation(fields: [itemBrandId], references: [id])
  category                      ItemCategory            @relation(fields: [itemCategoryId], references: [id])
  color                         ItemColor               @relation(fields: [itemColorId], references: [id])
  size                          ItemSize                @relation(fields: [itemSizeId], references: [id])
  Org                           Org                     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  ItemAcceptDetail              ItemAcceptDetail[]
  parentItemRelation            ItemRelation[]          @relation("itemRelation_parent")
  serviceItemRelation           ItemRelation[]          @relation("itemRelation_service")
  ItemStock                     ItemStock[]
  ShelfItemDetail               ShelfItemDetail[]
  CustomerTransactionItemDetail TransactionItemDetail[]
  itemBarcode                   itemBarcode[]

  @@index([orgId])
  @@index([itemColorId])
  @@index([itemSizeId])
  @@index([itemCategoryId])
  @@index([itemBrandId])
  @@index([shelfBoxId])
  @@index([shelfId])
}

model ItemRelation {
  id            String  @id @default(cuid())
  parentItemId  String?
  serviceItemId String?
  parentItem    Item?   @relation("itemRelation_parent", fields: [parentItemId], references: [id])
  serviceItem   Item?   @relation("itemRelation_service", fields: [serviceItemId], references: [id])
}

model ItemAcceptHistory {
  id         String             @id @default(cuid())
  createDate DateTime           @default(now())
  storageId  String
  name       String
  orgId      String?
  customerId String
  items      ItemAcceptDetail[]
  from       Customer           @relation(fields: [customerId], references: [id])
  org        Org?               @relation(fields: [orgId], references: [id])
  storage    Storage            @relation(fields: [storageId], references: [id])

  @@index([customerId])
  @@index([orgId])
  @@index([storageId])
}

model ItemAcceptDetail {
  id                  String             @id @default(cuid())
  itemId              String
  quantity            Int
  itemAcceptHistoryId String?
  orgId               String?
  itemBarcodeId       String
  ItemAcceptHistory   ItemAcceptHistory? @relation(fields: [itemAcceptHistoryId], references: [id])
  itemBarcode         itemBarcode        @relation(fields: [itemBarcodeId], references: [id])
  item                Item               @relation(fields: [itemId], references: [id])
  Org                 Org?               @relation(fields: [orgId], references: [id])

  @@index([itemAcceptHistoryId])
  @@index([itemBarcodeId])
  @@index([itemId])
  @@index([orgId])
}

model ItemHistory {
  id                 String        @id @default(cuid())
  updatedItemId      String?
  name               String
  itemCode           String
  isSerialNoRequired Boolean
  image              String?
  mainDealerPrice    Float?
  multiPrice         Float?
  dealerPrice        Float?
  singlePrice        Float?
  isServiceItem      Boolean
  itemColorId        String
  itemSizeId         String
  itemCategoryId     String
  itemBrandId        String
  orgId              String
  shelfBoxId         String?
  shelfId            String?
  netWeight          Float?
  volume             Float?
  changeDate         DateTime      @default(now())
  action             audit_actions
  updatedBy          String?       @default("System")
  serviceItemList    String[]
}

model Shelf {
  id         String            @id @default(cuid())
  createDate DateTime          @default(now())
  updateDate DateTime          @updatedAt
  storageId  String
  name       String?
  storage    Storage           @relation(fields: [storageId], references: [id])
  boxes      ShelfBox[]
  items      ShelfItemDetail[]

  @@index([storageId])
}

model ShelfHistory {
  id         String        @id @default(cuid())
  shelfId    String?
  storageId  String
  name       String?
  changeDate DateTime      @default(now())
  action     audit_actions
  updatedBy  String?       @default("System")
}

model ShelfBox {
  id         String            @id @default(cuid())
  createDate DateTime          @default(now())
  updateDate DateTime          @updatedAt
  shelfId    String?
  storageId  String
  name       String?
  Shelf      Shelf?            @relation(fields: [shelfId], references: [id])
  storage    Storage           @relation(fields: [storageId], references: [id])
  items      ShelfItemDetail[]

  @@index([shelfId])
  @@index([storageId])
}

model ShelfBoxHistory {
  id         String        @id @default(cuid())
  shelfBoxId String?
  shelfId    String?
  storageId  String
  name       String?
  changeDate DateTime      @default(now())
  action     audit_actions
  updatedBy  String?       @default("System")
}

model ShelfItemDetail {
  id         String    @id @default(cuid())
  createDate DateTime  @default(now())
  updateDate DateTime  @updatedAt
  shelfId    String?
  shelfBoxId String?
  itemId     String
  quantity   Int
  item       Item      @relation(fields: [itemId], references: [id])
  ShelfBox   ShelfBox? @relation(fields: [shelfBoxId], references: [id])
  Shelf      Shelf?    @relation(fields: [shelfId], references: [id])

  @@index([itemId])
  @@index([shelfBoxId])
  @@index([shelfId])
}

model ShelfItemDetailHistory {
  id                String        @id @default(cuid())
  shelfItemDetailId String?
  shelfId           String?
  shelfBoxId        String?
  itemId            String
  quantity          Int
  changeDate        DateTime      @default(now())
  action            audit_actions
  updatedBy         String?       @default("System")
}

model itemBarcode {
  id               String             @id @default(cuid())
  barcode          String
  unit             String
  isMaster         Boolean
  quantity         Int
  itemId           String
  ItemAcceptDetail ItemAcceptDetail[]
  item             Item               @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId])
}

model itemBarcodeHistory {
  id            String        @id @default(cuid())
  changeDate    DateTime      @default(now())
  action        audit_actions
  updatedBy     String?       @default("System")
  barcode       String
  unit          String
  isMaster      Boolean
  quantity      Int
  itemBarcodeId String?
}

model ItemColor {
  id        String  @id @default(cuid())
  colorCode String
  colorText String
  orgId     String?
  Item      Item[]
  Org       Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

model ItemColorHistory {
  id          String        @id @default(cuid())
  itemColorId String?
  colorCode   String
  colorText   String
  orgId       String?
  changeDate  DateTime      @default(now())
  action      audit_actions
  updatedBy   String?       @default("System")
}

model ItemSize {
  id       String  @id @default(cuid())
  sizeCode String
  sizeText String
  orgId    String?
  Item     Item[]
  Org      Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

model ItemSizeHistory {
  id         String        @id @default(cuid())
  itemSizeId String?
  sizeCode   String
  sizeText   String
  orgId      String?
  changeDate DateTime      @default(now())
  action     audit_actions
  updatedBy  String?       @default("System")
}

model ItemCategory {
  id    String  @id @default(cuid())
  name  String
  orgId String?
  Item  Item[]
  Org   Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

model ItemCategoryHistory {
  id             String        @id @default(cuid())
  itemCategoryId String?
  name           String
  orgId          String?
  changeDate     DateTime      @default(now())
  action         audit_actions
  updatedBy      String?       @default("System")
}

model ItemBrand {
  id    String  @id @default(cuid())
  name  String
  orgId String?
  Item  Item[]
  Org   Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
}

model ItemBrandHistory {
  id          String        @id @default(cuid())
  itemBrandId String?
  name        String
  orgId       String?
  changeDate  DateTime      @default(now())
  action      audit_actions
  updatedBy   String?       @default("System")
}

model ItemStock {
  id        String  @id @default(cuid())
  itemId    String
  storageId String
  stock     Int
  item      Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  storage   Storage @relation(fields: [storageId], references: [id], onDelete: Cascade)

  @@index([storageId])
  @@index([itemId])
}

model ItemStockHistory {
  id          BigInt        @id @default(autoincrement())
  itemStockId String?
  itemId      String
  storageId   String
  stock       Int
  changeDate  DateTime      @default(now()) @db.Timestamp(6)
  action      audit_actions
  updatedBy   String?       @default("System")
}

model Org {
  id                     String              @id @default(cuid())
  name                   String
  type                   OrgType             @default(Org)
  priceType              PriceType           @default(org)
  Customer               Customer[]          @relation("connectedDealer")
  customers              Customer[]
  dealerRelations        DealerRelation[]    @relation("OrgDealers_dealers")
  parentRelations        DealerRelation[]    @relation("OrgDealers_parents")
  DealerView             DealerView[]
  items                  Item[]
  ItemAcceptDetail       ItemAcceptDetail[]
  ItemAcceptHistory      ItemAcceptHistory[]
  ItemBrand              ItemBrand[]
  ItemCategory           ItemCategory[]
  ItemColor              ItemColor[]
  ItemSize               ItemSize[]
  members                Member[]
  roles                  MemberRole[]
  storages               Storage[]
  Transaction            Transaction[]       @relation("connectedOrg")
  transferredTransaction Transaction[]       @relation("trasferredDealer")
}

model OrgHistory {
  id         String        @id @default(cuid())
  orgId      String?
  name       String
  type       OrgType
  changeDate DateTime      @default(now())
  action     audit_actions
  updatedBy  String?       @default("System")
}

model DealerRelation {
  id          String @id @default(cuid())
  dealerId    String
  parentOrgId String
  dealer      Org    @relation("OrgDealers_dealers", fields: [dealerId], references: [id])
  parentOrg   Org    @relation("OrgDealers_parents", fields: [parentOrgId], references: [id])
}

model DealerRelationHistory {
  id               String        @id @default(cuid())
  dealerRelationId String?
  dealerId         String
  parentOrgId      String
  changeDate       DateTime      @default(now())
  action           audit_actions
  updatedBy        String?       @default("System")
}

model Storage {
  id                String              @id @default(cuid())
  name              String
  orgId             String?
  ItemAcceptHistory ItemAcceptHistory[]
  ItemStock         ItemStock[]
  Shelf             Shelf[]
  ShelfBox          ShelfBox[]
  Org               Org?                @relation(fields: [orgId], references: [id], onDelete: Cascade)
  Transaction       Transaction[]

  @@index([orgId])
}

model StorageHistory {
  id         String        @id @default(cuid())
  storageId  String?
  name       String
  orgId      String?
  changeDate DateTime      @default(now())
  action     audit_actions
  updatedBy  String?       @default("System")
}

model MemberRoleHistory {
  id                BigInt        @id @default(autoincrement())
  memberPermissions String[]
  name              String
  orgId             String?
  changedate        DateTime      @default(now()) @db.Timestamp(6)
  action            audit_actions
  updatedBy         String?       @default("System")
}

enum OrgType {
  Org
  Dealer
}

enum transactionType {
  Sale
  Accept
  Cancel
  Return
  Count
}

enum AdressType {
  Normal
  Billing
  Shipping
}

enum PriceType {
  mainDealerPrice
  dealerPrice
  multiPrice
  singlePrice
  org
}

enum MemberType {
  Dealer
  Organization
}

enum audit_actions {
  INSERT
  UPDATE
  DELETE
}
