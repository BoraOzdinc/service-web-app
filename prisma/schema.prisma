// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Customer {
    id                String    @id @default(cuid())
    name              String
    surname           String
    phoneNumber       String
    email             String
    identificationNo  String?
    connectedDealer   Dealer?   @relation("connectedDealer", fields: [connectedDealerId], references: [id])
    connectedDealerId String?
    priceType         PriceType

    companyName String?
    taxDep      String?
    taxNumber   String?

    adresses Adress[]

    org               Org?                @relation(fields: [orgId], references: [id])
    orgId             String?
    dealer            Dealer?             @relation("Dealer", fields: [dealerId], references: [id])
    dealerId          String?
    ItemAcceptHistory ItemAcceptHistory[]
    ItemSellHistory   ItemSellHistory[]
    Transactions      Transaction[]
}

model Transaction {
    id         String   @id @default(cuid())
    customer   Customer @relation(fields: [customerId], references: [id])
    customerId String

    createDate      DateTime        @default(now())
    transactionType transactionType

    payAmount   String
    totalAmount String

    discount     String
    priceType    PriceType
    exchangeRate String

    storage     Storage                 @relation(fields: [storageId], references: [id])
    boughtItems TransactionItemDetail[]

    dealer          Dealer?           @relation(fields: [dealerId], references: [id])
    dealerId        String?
    storageId       String
    ItemSellHistory ItemSellHistory[]
}

model TransactionItemDetail {
    id       String  @id @default(cuid())
    item     Item    @relation(fields: [itemId], references: [id])
    itemId   String
    price    String?
    quantity Int

    CustomerTransaction   Transaction? @relation(fields: [customerTransactionId], references: [id])
    customerTransactionId String?
}

enum transactionType {
    Sale
    Cancel
    Return
}

model Adress {
    id String @id @default(cuid())

    Type        AdressType
    PhoneNumber String?
    Country     String?
    Province    String?
    District    String?
    Neighbour   String?
    ZipCode     String?
    Adress      String?

    Customer   Customer? @relation(fields: [customerId], references: [id])
    customerId String?
}

enum AdressType {
    Normal
    Billing
    Shipping
}

model DealerView {
    id       String @id @default(cuid())
    dealer   Dealer @relation(fields: [dealerId], references: [id])
    item     Item   @relation(fields: [itemId], references: [id])
    itemId   String
    stock    Int
    dealerId String

    @@unique([dealerId, itemId])
    @@index([itemId])
}

model Dealer {
    id   String @id @default(cuid())
    name String

    org   Org    @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId String

    priceType PriceType

    dealerStorages Storage[]

    items        Item[]
    ItemHistory  ItemHistory[]
    ItemColor    ItemColor[]
    ItemSize     ItemSize[]
    ItemCategory ItemCategory[]
    ItemBrand    ItemBrand[]

    members Member[]
    views   DealerView[]

    roles               MemberRole[]
    ItemAcceptHistory   ItemAcceptHistory[]
    ItemAcceptDetail    ItemAcceptDetail[]
    Customer            Customer[]          @relation("Dealer")
    connectedCustomer   Customer[]          @relation("connectedDealer")
    ItemSellHistory     ItemSellHistory[]
    CustomerTransaction Transaction[]

    @@index([orgId])
}

enum PriceType {
    mainDealerPrice
    dealerPrice
    multiPrice
    singlePrice
}

model Member {
    id     String  @id @default(cuid())
    user   User    @relation(fields: [userId], references: [id])
    dealer Dealer? @relation(fields: [dealerId], references: [id])
    org    Org?    @relation(fields: [orgId], references: [id])

    roles MemberRole[]

    orgId    String?
    dealerId String?
    userId   String

    @@unique([userId])
    @@index([dealerId, userId])
}

model MemberRole {
    id          String             @id @default(cuid())
    name        String
    permissions MemberPermission[]

    members Member[]

    Dealer   Dealer? @relation(fields: [dealerId], references: [id])
    dealerId String?
    Org      Org?    @relation(fields: [orgId], references: [id])
    orgId    String?
}

model MemberPermission {
    id          String @id @default(cuid())
    name        String
    description String

    assignableTo MemberType[]

    MemberRole MemberRole[]
}

enum MemberType {
    Dealer
    Organization
}

model Item {
    id                 String        @id @default(cuid())
    createDate         DateTime      @default(now())
    updateDate         DateTime      @updatedAt
    name               String
    itemBarcode        itemBarcode[]
    itemCode           String
    isSerialNoRequired Boolean
    serialNo           String?
    image              String?
    netWeight          String?
    volume             String?
    color              ItemColor     @relation(fields: [itemColorId], references: [id])
    size               ItemSize      @relation(fields: [itemSizeId], references: [id])
    category           ItemCategory  @relation(fields: [itemCategoryId], references: [id])
    brand              ItemBrand     @relation(fields: [itemBrandId], references: [id])

    mainDealerPrice String?
    multiPrice      String?
    dealerPrice     String?
    singlePrice     String?

    isServiceItem Boolean

    ItemHistory ItemHistory[]
    ItemStock   ItemStock[]

    itemColorId    String
    itemSizeId     String
    itemCategoryId String
    itemBrandId    String
    DealerView     DealerView[]

    Org   Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId String?

    Dealer                        Dealer?                 @relation(fields: [dealerId], references: [id])
    dealerId                      String?
    ItemAcceptDetail              ItemAcceptDetail[]
    ItemSellDetail                ItemSellDetail[]
    CustomerTransactionItemDetail TransactionItemDetail[]

    @@index([orgId])
    @@index([itemColorId])
    @@index([itemSizeId])
    @@index([itemCategoryId])
    @@index([itemBrandId])
}

model itemBarcode {
    id               String             @id @default(cuid())
    barcode          String
    unit             String
    isMaster         Boolean
    quantity         Int
    item             Item               @relation(fields: [itemId], references: [id])
    itemId           String
    ItemAcceptDetail ItemAcceptDetail[]

    @@index([itemId])
}

model ItemColor {
    id        String  @id @default(cuid())
    colorCode String
    colorText String
    Item      Item[]
    Org       Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId     String?
    Dealer    Dealer? @relation(fields: [dealerId], references: [id])
    dealerId  String?

    @@index([orgId])
}

model ItemSize {
    id       String  @id @default(cuid())
    sizeCode String
    sizeText String
    Item     Item[]
    Org      Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId    String?
    Dealer   Dealer? @relation(fields: [dealerId], references: [id])
    dealerId String?

    @@index([orgId])
}

model ItemCategory {
    id   String @id @default(cuid())
    name String

    Org      Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId    String?
    Item     Item[]
    Dealer   Dealer? @relation(fields: [dealerId], references: [id])
    dealerId String?

    @@index([orgId])
}

model ItemBrand {
    id   String @id @default(cuid())
    name String

    Org      Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId    String?
    Item     Item[]
    Dealer   Dealer? @relation(fields: [dealerId], references: [id])
    dealerId String?

    @@index([orgId])
}

model ItemStock {
    id        String  @id @default(cuid())
    item      Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
    itemId    String
    storage   Storage @relation(fields: [storageId], references: [id], onDelete: Cascade)
    storageId String
    stock     Int

    @@index([storageId])
    @@index([itemId])
}

model ItemHistory {
    id          String             @id @default(cuid())
    createDate  DateTime           @default(now())
    action      ItemHistoryActions
    description String
    item        Item               @relation(fields: [itemId], references: [id])
    itemId      String
    quantity    Int

    org       Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId     String?
    createdBy String

    fromStorage   Storage? @relation("FromStorage", fields: [fromStorageId], references: [id])
    fromStorageId String?
    toStorage     Storage? @relation("ToStorage", fields: [toStorageId], references: [id])
    toStorageId   String?

    Dealer   Dealer? @relation(fields: [dealerId], references: [id])
    dealerId String?

    @@index([itemId])
    @@index([fromStorageId])
    @@index([toStorageId])
    @@index([orgId])
}

enum ItemHistoryActions {
    AddItem
    UpdateItem
    DeleteItem
}

model ItemAcceptHistory {
    id         String   @id @default(cuid())
    createDate DateTime @default(now())

    items ItemAcceptDetail[]
    from  Customer           @relation(fields: [customerId], references: [id])

    storage   Storage @relation(fields: [storageId], references: [id])
    storageId String
    name      String

    org        Org?    @relation(fields: [orgId], references: [id])
    orgId      String?
    dealer     Dealer? @relation(fields: [dealerId], references: [id])
    dealerId   String?
    customerId String
}

model ItemAcceptDetail {
    id          String      @id @default(cuid())
    item        Item        @relation(fields: [itemId], references: [id])
    itemId      String
    itemBarcode itemBarcode @relation(fields: [itemBarcodeId], references: [id])
    quantity    Int

    ItemAcceptHistory   ItemAcceptHistory? @relation(fields: [itemAcceptHistoryId], references: [id])
    itemAcceptHistoryId String?
    Dealer              Dealer?            @relation(fields: [dealerId], references: [id])
    dealerId            String?
    Org                 Org?               @relation(fields: [orgId], references: [id])
    orgId               String?
    itemBarcodeId       String
}

model ItemSellHistory {
    id         String   @id @default(cuid())
    createDate DateTime @default(now())

    items           ItemSellDetail[]
    to              Customer         @relation(fields: [customerId], references: [id])
    customerId      String
    transactionType transactionType

    storage   Storage @relation(fields: [storageId], references: [id])
    storageId String
    name      String

    connectedTransaction Transaction @relation(fields: [transactionId], references: [id])

    org           Org?    @relation(fields: [orgId], references: [id])
    orgId         String?
    dealer        Dealer? @relation(fields: [dealerId], references: [id])
    dealerId      String?
    transactionId String
}

model ItemSellDetail {
    id       String @id @default(cuid())
    item     Item   @relation(fields: [itemId], references: [id])
    itemId   String
    quantity Int

    ItemAcceptHistory   ItemSellHistory? @relation(fields: [itemAcceptHistoryId], references: [id])
    itemAcceptHistoryId String?
}

model Org {
    id      String @id @default(cuid())
    orgName String

    storages Storage[]

    items        Item[]
    ItemHistory  ItemHistory[]
    ItemColor    ItemColor[]
    ItemSize     ItemSize[]
    ItemCategory ItemCategory[]
    ItemBrand    ItemBrand[]
    dealers      Dealer[]
    members      Member[]

    roles             MemberRole[]
    ItemAcceptHistory ItemAcceptHistory[]
    ItemAcceptDetail  ItemAcceptDetail[]
    Customer          Customer[]
    ItemSellHistory   ItemSellHistory[]
}

model Storage {
    id    String  @id @default(cuid())
    name  String
    Org   Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)
    orgId String?

    ItemStock ItemStock[]

    fromItemHistory ItemHistory[] @relation("FromStorage")
    toItemHistory   ItemHistory[] @relation("ToStorage")

    Dealer            Dealer?             @relation(fields: [dealerId], references: [id], onDelete: Cascade)
    dealerId          String?
    ItemAcceptHistory ItemAcceptHistory[]
    ItemSellHistory   ItemSellHistory[]
    Transaction       Transaction[]

    @@index([orgId])
    @@index([dealerId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime @map("expiresAt")
    user         User     @relation(fields: [userId], references: [id])

    @@map("sessions")
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime @map("expiresAt")

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    member        Member?
}
