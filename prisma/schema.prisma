// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Service {
    id           String    @id @default(cuid())
    customerName String
    companyName  String
    isDealer     Boolean
    adress       String
    phoneNumber  String
    state        Int
    status       String
    email        String    @unique
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    warrantyDate DateTime?

    customerMessage String
    serviceNote     String

    product     String
    productType Int
    Item        Item[]

    Org       Org?     @relation(fields: [orgId], references: [id])
    orgId     String?
    Storage   Storage? @relation(fields: [storageId], references: [id])
    storageId String?

    @@index([customerName])
    @@index([orgId])
    @@index([storageId])
}

model Item {
    id                 String        @id @default(cuid())
    createDate         DateTime      @default(now())
    updateDate         DateTime      @updatedAt
    name               String
    itemBarcode        itemBarcode[]
    itemCode           String
    isSerialNoRequired Boolean
    serialNo           String?
    image              String?
    netWeight          String
    volume             String
    color              ItemColor     @relation(fields: [itemColorId], references: [id])
    size               ItemSize      @relation(fields: [itemSizeId], references: [id])
    category           ItemCategory  @relation(fields: [itemCategoryId], references: [id])
    brand              ItemBrand     @relation(fields: [itemBrandId], references: [id])

    mainDealerPrice String
    multiPrice      String
    dealerPrice     String
    singlePrice     String

    Service       Service[]
    isServiceItem Boolean

    ItemHistory    ItemHistory[]
    ItemStock      ItemStock[]
    Org            Org           @relation(fields: [orgId], references: [id])
    orgId          String
    itemColorId    String
    itemSizeId     String
    itemCategoryId String
    itemBrandId    String

    @@index([orgId])
    @@index([itemColorId])
    @@index([itemSizeId])
    @@index([itemCategoryId])
    @@index([itemBrandId])
}

model itemBarcode {
    id       String  @id @default(cuid())
    barcode  String
    unit     String
    isMaster Boolean
    quantity Int
    item     Item    @relation(fields: [itemId], references: [id])
    itemId   String

    @@index([itemId])
}

model ItemColor {
    id        String @id @default(cuid())
    colorCode String
    colorText String
    Item      Item[]
    Org       Org    @relation(fields: [orgId], references: [id])
    orgId     String

    @@index([orgId])
}

model ItemSize {
    id       String @id @default(cuid())
    sizeCode String
    sizeText String
    Item     Item[]
    Org      Org    @relation(fields: [orgId], references: [id])
    orgId    String

    @@index([orgId])
}

model ItemCategory {
    id   String @id @default(cuid())
    name String

    Org   Org    @relation(fields: [orgId], references: [id])
    orgId String
    Item  Item[]

    @@index([orgId])
}

model ItemBrand {
    id   String @id @default(cuid())
    name String

    Org   Org    @relation(fields: [orgId], references: [id])
    orgId String
    Item  Item[]

    @@index([orgId])
}

model ItemStock {
    id        String  @id @default(cuid())
    item      Item    @relation(fields: [itemId], references: [id])
    itemId    String
    storage   Storage @relation(fields: [storageId], references: [id])
    storageId String
    stock     Int

    @@index([storageId])
    @@index([itemId])
}

model ItemHistory {
    id          String   @id @default(cuid())
    createDate  DateTime @default(now())
    description String
    item        Item     @relation(fields: [itemId], references: [id])
    itemId      String
    quantity    Int

    org   Org    @relation(fields: [orgId], references: [id])
    orgId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    fromStorage   Storage? @relation("FromStorage", fields: [fromStorageId], references: [id])
    fromStorageId String?
    toStorage     Storage? @relation("ToStorage", fields: [toStorageId], references: [id])
    toStorageId   String?

    @@index([itemId])
    @@index([fromStorageId])
    @@index([toStorageId])
    @@index([orgId])
    @@index([userId])
}

model Org {
    id      String @id @default(cuid())
    orgName String

    Users User[]

    items        Item[]
    service      Service[]
    storages     Storage[]
    ItemHistory  ItemHistory[]
    ItemColor    ItemColor[]
    ItemSize     ItemSize[]
    ItemCategory ItemCategory[]
    ItemBrand    ItemBrand[]
}

model Storage {
    id              String        @id @default(cuid())
    name            String
    service         Service[]
    Org             Org?          @relation(fields: [orgId], references: [id])
    orgId           String?
    fromItemHistory ItemHistory[] @relation("FromStorage")
    toItemHistory   ItemHistory[] @relation("ToStorage")
    ItemStock       ItemStock[]

    @@index([orgId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    Org         Org?          @relation(fields: [orgId], references: [id])
    orgId       String?
    ItemHistory ItemHistory[]

    @@index([orgId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
