// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Service {
    id           String    @id @default(cuid())
    customerName String
    companyName  String
    isDealer     Boolean
    adress       String
    phoneNumber  String
    state        Int
    status       String
    email        String    @unique
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    warrantyDate DateTime?

    customerMessage String
    serviceNote     String

    product     String
    productType Int
    Item        Item[]

    Org       Org?     @relation(fields: [orgId], references: [id])
    orgId     String?
    Storage   Storage? @relation(fields: [storageId], references: [id])
    storageId String?

    @@index([customerName])
    @@index([orgId])
    @@index([storageId])
}

model Item {
    id         String   @id @default(cuid())
    createDate DateTime @default(now())
    updateDate DateTime @updatedAt
    barcode    String
    serialNo   String
    name       String
    brand      String
    stock      Int
    popImage   String?

    mainDealerPrice String
    multiPrice      String
    dealerPrice     String
    singlePrice     String

    Service   Service? @relation(fields: [serviceId], references: [id])
    serviceId String?
    Storage   Storage? @relation(fields: [storageId], references: [id])
    storageId String?

    @@index([serviceId])
    @@index([storageId])
}

model Org {
    id      String @id @default(cuid())
    orgName String

    Users User[]

    service  Service[]
    storages Storage[]
}

model Storage {
    id      String    @id @default(cuid())
    name    String
    items   Item[]
    service Service[]
    Org     Org?      @relation(fields: [orgId], references: [id])
    orgId   String?

    @@index([orgId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    Org   Org?    @relation(fields: [orgId], references: [id])
    orgId String?

    @@index([orgId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
