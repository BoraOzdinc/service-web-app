generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id                String              @id @default(cuid())
  name              String
  surname           String
  phoneNumber       String
  email             String
  identificationNo  String?
  connectedDealerId String?
  priceType         PriceType
  companyName       String?
  taxDep            String?
  taxNumber         String?
  orgId             String?
  dealerId          String?
  adresses          Adress[]
  connectedDealer   Dealer?             @relation("connectedDealer", fields: [connectedDealerId], references: [id])
  dealer            Dealer?             @relation("Dealer", fields: [dealerId], references: [id])
  org               Org?                @relation(fields: [orgId], references: [id])
  ItemAcceptHistory ItemAcceptHistory[]
  Transactions      Transaction[]

  @@index([connectedDealerId])
  @@index([dealerId])
  @@index([orgId])
}

model Transaction {
  id              String                  @id @default(cuid())
  customerId      String
  createDate      DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  transactionType transactionType
  payAmount       String
  totalAmount     String
  discount        String
  priceType       PriceType
  exchangeRate    String
  dealerId        String?
  storageId       String
  employee        Member?                 @relation(fields: [memberId], references: [id])
  customer        Customer                @relation(fields: [customerId], references: [id])
  org             Org?                    @relation(fields: [orgId], references: [id])
  dealer          Dealer?                 @relation(fields: [dealerId], references: [id])
  storage         Storage                 @relation(fields: [storageId], references: [id])
  items           TransactionItemDetail[]
  orgId           String?
  memberId        String?

  @@index([customerId])
  @@index([dealerId, orgId, storageId])
  @@index([storageId])
}

model TransactionItemDetail {
  id                    String      @id @default(cuid())
  itemId                String
  price                 String?
  quantity              Int
  serialNumbers         String[]
  customerTransactionId String
  CustomerTransaction   Transaction @relation(fields: [customerTransactionId], references: [id])
  item                  Item        @relation(fields: [itemId], references: [id])

  @@index([customerTransactionId])
  @@index([itemId])
}

model Adress {
  id          String     @id @default(cuid())
  Type        AdressType
  PhoneNumber String?
  Country     String?
  Province    String?
  District    String?
  Neighbour   String?
  ZipCode     String?
  Adress      String?
  customerId  String?
  Customer    Customer?  @relation(fields: [customerId], references: [id])

  @@index([customerId])
}

model DealerView {
  id       String @id @default(cuid())
  itemId   String
  stock    Int
  dealerId String
  dealer   Dealer @relation(fields: [dealerId], references: [id])
  item     Item   @relation(fields: [itemId], references: [id])

  @@unique([dealerId, itemId])
  @@index([itemId])
  @@index([dealerId])
}

model Dealer {
  id                  String              @id @default(cuid())
  name                String
  orgId               String
  priceType           PriceType
  connectedCustomer   Customer[]          @relation("connectedDealer")
  Customer            Customer[]          @relation("Dealer")
  org                 Org                 @relation(fields: [orgId], references: [id], onDelete: Cascade)
  views               DealerView[]
  items               Item[]
  ItemAcceptDetail    ItemAcceptDetail[]
  ItemAcceptHistory   ItemAcceptHistory[]
  ItemBrand           ItemBrand[]
  ItemCategory        ItemCategory[]
  ItemColor           ItemColor[]
  ItemHistory         ItemHistory[]
  ItemSize            ItemSize[]
  members             Member[]
  roles               MemberRole[]
  dealerStorages      Storage[]
  CustomerTransaction Transaction[]

  @@index([orgId])
}

model Member {
  id          String        @id @default(cuid())
  orgId       String?
  dealerId    String?
  userEmail   String        @unique
  uid         String?       @unique @db.Uuid
  dealer      Dealer?       @relation(fields: [dealerId], references: [id])
  org         Org?          @relation(fields: [orgId], references: [id])
  roles       MemberRole[]  @relation("MemberToMemberRole")
  Transaction Transaction[]

  @@index([dealerId])
  @@index([orgId])
}

model MemberRole {
  id          String             @id @default(cuid())
  name        String
  dealerId    String?
  orgId       String?
  Dealer      Dealer?            @relation(fields: [dealerId], references: [id])
  Org         Org?               @relation(fields: [orgId], references: [id])
  permissions MemberPermission[] @relation("MemberPermissionToMemberRole")
  members     Member[]           @relation("MemberToMemberRole")

  @@index([dealerId])
  @@index([orgId])
}

model MemberPermission {
  id           String       @id @default(cuid())
  name         String
  description  String
  assignableTo MemberType[]
  MemberRole   MemberRole[] @relation("MemberPermissionToMemberRole")
}

model Item {
  id                            String                  @id @default(cuid())
  createDate                    DateTime                @default(now())
  updateDate                    DateTime                @updatedAt
  name                          String
  itemCode                      String
  isSerialNoRequired            Boolean
  image                         String?
  netWeight                     String?
  volume                        String?
  mainDealerPrice               Float?
  multiPrice                    Float?
  dealerPrice                   Float?
  singlePrice                   Float?
  isServiceItem                 Boolean
  itemColorId                   String
  itemSizeId                    String
  itemCategoryId                String
  itemBrandId                   String
  orgId                         String?
  dealerId                      String?
  shelfBoxId                    String?
  shelfId                       String?
  DealerView                    DealerView[]
  Dealer                        Dealer?                 @relation(fields: [dealerId], references: [id])
  brand                         ItemBrand               @relation(fields: [itemBrandId], references: [id])
  category                      ItemCategory            @relation(fields: [itemCategoryId], references: [id])
  color                         ItemColor               @relation(fields: [itemColorId], references: [id])
  size                          ItemSize                @relation(fields: [itemSizeId], references: [id])
  Org                           Org?                    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  ItemAcceptDetail              ItemAcceptDetail[]
  ItemHistory                   ItemHistory[]
  ItemStock                     ItemStock[]
  ShelfItemDetail               ShelfItemDetail[]
  CustomerTransactionItemDetail TransactionItemDetail[]
  itemBarcode                   itemBarcode[]

  @@index([orgId])
  @@index([itemColorId])
  @@index([itemSizeId])
  @@index([itemCategoryId])
  @@index([itemBrandId])
  @@index([dealerId])
  @@index([shelfBoxId])
  @@index([shelfId])
}

model Shelf {
  id         String            @id @default(cuid())
  createDate DateTime          @default(now())
  updateDate DateTime          @updatedAt
  storageId  String
  name       String?
  storage    Storage           @relation(fields: [storageId], references: [id])
  boxes      ShelfBox[]
  items      ShelfItemDetail[]

  @@index([storageId])
}

model ShelfBox {
  id         String            @id @default(cuid())
  createDate DateTime          @default(now())
  updateDate DateTime          @updatedAt
  shelfId    String?
  storageId  String
  name       String?
  Shelf      Shelf?            @relation(fields: [shelfId], references: [id])
  storage    Storage           @relation(fields: [storageId], references: [id])
  items      ShelfItemDetail[]

  @@index([shelfId])
  @@index([storageId])
}

model ShelfItemDetail {
  id         String    @id @default(cuid())
  createDate DateTime  @default(now())
  updateDate DateTime  @updatedAt
  shelfId    String?
  shelfBoxId String?
  itemId     String
  quantity   Int
  item       Item      @relation(fields: [itemId], references: [id])
  ShelfBox   ShelfBox? @relation(fields: [shelfBoxId], references: [id])
  Shelf      Shelf?    @relation(fields: [shelfId], references: [id])

  @@index([itemId])
  @@index([shelfBoxId])
  @@index([shelfId])
}

model itemBarcode {
  id               String             @id @default(cuid())
  barcode          String
  unit             String
  isMaster         Boolean
  quantity         Int
  itemId           String
  ItemAcceptDetail ItemAcceptDetail[]
  item             Item               @relation(fields: [itemId], references: [id])

  @@index([itemId])
}

model ItemColor {
  id        String  @id @default(cuid())
  colorCode String
  colorText String
  orgId     String?
  dealerId  String?
  Item      Item[]
  Dealer    Dealer? @relation(fields: [dealerId], references: [id])
  Org       Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([dealerId])
}

model ItemSize {
  id       String  @id @default(cuid())
  sizeCode String
  sizeText String
  orgId    String?
  dealerId String?
  Item     Item[]
  Dealer   Dealer? @relation(fields: [dealerId], references: [id])
  Org      Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([dealerId])
}

model ItemCategory {
  id       String  @id @default(cuid())
  name     String
  orgId    String?
  dealerId String?
  Item     Item[]
  Dealer   Dealer? @relation(fields: [dealerId], references: [id])
  Org      Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([dealerId])
}

model ItemBrand {
  id       String  @id @default(cuid())
  name     String
  orgId    String?
  dealerId String?
  Item     Item[]
  Dealer   Dealer? @relation(fields: [dealerId], references: [id])
  Org      Org?    @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([dealerId])
}

model ItemStock {
  id        String  @id @default(cuid())
  itemId    String
  storageId String
  stock     Int
  item      Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  storage   Storage @relation(fields: [storageId], references: [id], onDelete: Cascade)

  @@index([storageId])
  @@index([itemId])
}

model ItemHistory {
  id            String             @id @default(cuid())
  createDate    DateTime           @default(now())
  action        ItemHistoryActions
  description   String
  itemId        String
  quantity      Int
  orgId         String?
  createdBy     String
  fromStorageId String?
  toStorageId   String?
  dealerId      String?
  Dealer        Dealer?            @relation(fields: [dealerId], references: [id])
  fromStorage   Storage?           @relation("FromStorage", fields: [fromStorageId], references: [id])
  item          Item               @relation(fields: [itemId], references: [id])
  org           Org?               @relation(fields: [orgId], references: [id], onDelete: Cascade)
  toStorage     Storage?           @relation("ToStorage", fields: [toStorageId], references: [id])

  @@index([itemId])
  @@index([fromStorageId])
  @@index([toStorageId])
  @@index([orgId])
  @@index([dealerId])
}

model ItemAcceptHistory {
  id         String             @id @default(cuid())
  createDate DateTime           @default(now())
  storageId  String
  name       String
  orgId      String?
  dealerId   String?
  customerId String
  items      ItemAcceptDetail[]
  from       Customer           @relation(fields: [customerId], references: [id])
  dealer     Dealer?            @relation(fields: [dealerId], references: [id])
  org        Org?               @relation(fields: [orgId], references: [id])
  storage    Storage            @relation(fields: [storageId], references: [id])

  @@index([customerId])
  @@index([dealerId])
  @@index([orgId])
  @@index([storageId])
}

model ItemAcceptDetail {
  id                  String             @id @default(cuid())
  itemId              String
  quantity            Int
  itemAcceptHistoryId String?
  dealerId            String?
  orgId               String?
  itemBarcodeId       String
  Dealer              Dealer?            @relation(fields: [dealerId], references: [id])
  ItemAcceptHistory   ItemAcceptHistory? @relation(fields: [itemAcceptHistoryId], references: [id])
  itemBarcode         itemBarcode        @relation(fields: [itemBarcodeId], references: [id])
  item                Item               @relation(fields: [itemId], references: [id])
  Org                 Org?               @relation(fields: [orgId], references: [id])

  @@index([dealerId])
  @@index([itemAcceptHistoryId])
  @@index([itemBarcodeId])
  @@index([itemId])
  @@index([orgId])
}

model Org {
  id                String              @id @default(cuid())
  orgName           String
  Customer          Customer[]
  dealers           Dealer[]
  items             Item[]
  ItemAcceptDetail  ItemAcceptDetail[]
  ItemAcceptHistory ItemAcceptHistory[]
  ItemBrand         ItemBrand[]
  ItemCategory      ItemCategory[]
  ItemColor         ItemColor[]
  ItemHistory       ItemHistory[]
  ItemSize          ItemSize[]
  members           Member[]
  roles             MemberRole[]
  storages          Storage[]
  Transaction       Transaction[]
}

model Storage {
  id                String              @id @default(cuid())
  name              String
  orgId             String?
  dealerId          String?
  ItemAcceptHistory ItemAcceptHistory[]
  fromItemHistory   ItemHistory[]       @relation("FromStorage")
  toItemHistory     ItemHistory[]       @relation("ToStorage")
  ItemStock         ItemStock[]
  Shelf             Shelf[]
  ShelfBox          ShelfBox[]
  Dealer            Dealer?             @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  Org               Org?                @relation(fields: [orgId], references: [id], onDelete: Cascade)
  Transaction       Transaction[]

  @@index([orgId])
  @@index([dealerId])
}

enum transactionType {
  Sale
  Accept
  Cancel
  Return
}

enum AdressType {
  Normal
  Billing
  Shipping
}

enum PriceType {
  mainDealerPrice
  dealerPrice
  multiPrice
  singlePrice
}

enum MemberType {
  Dealer
  Organization
}

enum ItemHistoryActions {
  AddItem
  UpdateItem
  DeleteItem
}
